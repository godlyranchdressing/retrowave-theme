@function gtkalpha($c, $a) {
  @return unquote("alpha(#{$c},#{$a})");
}

$ease-out-quad: cubic-bezier(0.25, 0.46, 0.45, 0.94);
$backdrop_transition: 200ms ease-out;
$button_transition: all 200ms $ease-out-quad;
$button_radius: 0px;
$menu_radius: 0px;
$window_radius: 0px;
$popover_radius: 0px;

* {
  padding: 0;

  -gtk-secondary-caret-color: $selected_bg_color;
}

button:focus,
checkbutton:focus,
radiobutton:focus,
switch:focus,
scale:focus,
label:focus,
row:focus,
flowboxchild:focus {
  // We use the outline properties to signal the focus properties
  // to the adwaita engine: using real CSS properties is faster,
  // and we don't use any outlines for now.
  outline-color: $selected_bg_color;
  outline-style: dashed;
  outline-offset: -3px;
  outline-width: 1px;
  -gtk-outline-radius: $button-radius - 2;
}

%background {
  @if ($glow) {
    background-image: linear-gradient(to bottom, $bg_color, $lighter_bg_color);
  }
  else {
    background-color: $bg_color;
  }
}

/***************
 * Base States *
 ***************/
.background,
window {
  color: $fg_color;
  @extend %background;

  &:backdrop {
    color: $backdrop_fg_color;
    background-color: $backdrop_bg_color;
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

.normal-icons {
  -gtk-icon-size: 16px;
}

.large-icons {
  -gtk-icon-size: 32px;
}

image.drag-icon {
  -gtk-icon-size: 32px;
}

/*
   These wildcard seems unavoidable, need to investigate.
   Wildcards are bad and troublesome, use them with care,
   or better, just don't.
   Everytime a wildcard is used a kitten dies, painfully.
*/

*:disabled {
  -gtk-icon-filter: opacity(0.5);
}

.gtkstyle-fallback {
  color: $fg_color;
  background-color: $bg_color;

  &:hover {
    color: $fg_color;
    background-color: lighten($bg_color, 10%);
  }

  &:active {
    color: $fg_color;
    background-color: darken($bg_color, 10%);
  }

  &:disabled {
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
  }

  &:selected {
    color: $selected_fg_color;
    background-color: $selected_bg_color;
  }
}

.view,
%view {
  color: $text_color;
  background-color: $base_color;

  &:backdrop {
    color: $backdrop_text_color;
    background-color: $backdrop_base_color;
    &:disabled {
      color: $backdrop_insensitive_color;
    }
  }

  &:disabled {
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
  }

  &:selected {
    &:focus,
    & {
      @extend %selected_items;

      border-radius: 3px;
    }
  }
}

.view {
  outline: none;
}

textview {
  outline: none;
  > text {
    @extend %view;

    selection {
      &:focus,
      & {
        @extend %selected_items;
      }
    }
  }
}

textview border {
  background-color: mix($bg_color, $base_color, 50%);
}

iconview {
  @extend .view;
}

.rubberband,
rubberband {
  border: 1px solid darken($selected_bg_color, 10%);
  background-color: transparentize(darken($selected_bg_color, 10%), 0.8);
}

flowbox {
  rubberband {
    @extend rubberband;
  }

  flowboxchild {
    padding: 3px;

    &:selected {
      @extend %selected_items;

      outline-offset: -2px;
    }
  }
}

.content-view .tile {
  margin: 2px;
  background-color: black;
  border-radius: 0;
  padding: 0;

  &:backdrop {
    background-color: darken($backdrop_base_color, 5%);
  }
  &:active,
  &:selected {
    background-color: $selected_bg_color;
  }
  &:disabled {
    background-color: $insensitive_bg_color;
  }
}

label {
  caret-color: currentColor; // this shouldn't be needed.

  &.separator {
    @extend .dim-label;

    color: $fg_color;

    &:backdrop {
      color: $backdrop_fg_color;
    }
  }

  row:selected &,
  &:selected {
    @extend %nobg_selected_items;
  }

  selection {
    background-color: $selected_bg_color;
    color: $selected_fg_color;
  }

  &:disabled {
    color: $insensitive_fg_color;

    selection {
      @extend %selected_items:disabled;
    }

    &:backdrop {
      color: $backdrop_insensitive_color;
    }
  }

  &:backdrop {
    color: $backdrop_fg_color;

    selection {
      @extend %selected_items:backdrop;
    }
  }
}

.dim-label {
  opacity: 0.55;
  text-shadow: none;
}

assistant {
  .sidebar {
    background-color: $base_color;
    border-top: 1px solid $borders_color;

    &:backdrop {
      background-color: $backdrop_base_color;
      border-color: $backdrop_borders_color;
    }
  }

  &.csd .sidebar {
    border-top-style: none;
  }

  .sidebar label {
    padding: 6px 12px;
  }

  .sidebar label.highlight {
    background-color: mix($bg_color, $fg_color, 80%);
  }
}

%osd,
.osd {
  color: $osd_fg_color;
  border: 1px solid $osd_borders_color;
  background-color: $osd_bg_color;
  background-clip: padding-box;
  text-shadow: 0 1px black;
  -gtk-icon-shadow: 0 1px black;

  &:backdrop {
    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

// catch all extend :)

%selected_items {
  background-color: $selected_bg_color;

  @at-root %nobg_selected_items,
    & {
    color: $selected_fg_color;

    &:disabled {
      color: mix($selected_fg_color, $selected_bg_color, 50%);
    }

    &:backdrop {
      color: $fg_color;

      &:disabled {
        color: mix($fg_color, $selected_bg_color, 30%);
      }
    }
  }
}

%scale_highlight {
  @include highlight_color();
  @if ($glow) {
    @extend %glow_horizontal;
  } @else {
    box-shadow: _glow($both: true, $alpha: 0.7);
  }
}

@if ($glow) {
  $c1: $neon_blue;
  $c2: $neon_pink;
  $l1: 2px;
  $l2: -2px;
  $a1: 0.55;
  $a2: 0.15;
  $b1: 4px;
  $b2: 3px;
  @keyframes glow_horizontal {
    0% {
      box-shadow: 0 $l1 $b1 0 transparentize($c1, $a1),
        0 $l2 $b1 0 transparentize($c2, $a1);
    }
    100% {
      box-shadow: 0 $l1 $b2 0 transparentize($c1, $a2),
        0 $l2 $b2 0 transparentize($c2, $a2);
    }
  }

  @keyframes glow_vertical {
    0% {
      box-shadow: $l1 0 $b1 0 transparentize($c1, $a1),
        $l2 0 $b1 0 transparentize($c2, $a1);
    }
    100% {
      box-shadow: $l1 0 $b2 0 transparentize($c1, $a2),
        $l2 0 $b2 0 transparentize($c2, $a2);
    }
  }

  @keyframes glow_sunset {
    $c1: $neon_yellow;
    $c2: $neon_pink;
    $l1: 1px;
    $l2: -1px;
    0% {
      box-shadow: $l1 0 $b1 0 transparentize($c1, $a1),
        $l2 0 $b1 0 transparentize($c2, $a1);
    }
    100% {
      box-shadow: $l1 0 $b2 0 transparentize($c1, $a2),
        $l2 0 $b2 0 transparentize($c2, $a2);
    }
  }

  @keyframes glow_blue {
    $c1: $neon_blue;
    $c2: $neon_blue;
    0% {
      box-shadow: $l1 0 $b1 0 transparentize($c1, $a1),
        $l2 0 $b1 0 transparentize($c2, $a1);
    }
    100% {
      box-shadow: $l1 0 $b2 0 transparentize($c1, $a2),
        $l2 0 $b2 0 transparentize($c2, $a2);
    }
  }

  @keyframes glow_pink {
    $c1: $neon_pink;
    $c2: $neon_pink;
    0% {
      box-shadow: $l1 0 $b1 0 transparentize($c1, $a1),
        $l2 0 $b1 0 transparentize($c2, $a1);
    }
    100% {
      box-shadow: $l1 0 $b2 0 transparentize($c1, $a2),
        $l2 0 $b2 0 transparentize($c2, $a2);
    }
  }

  @keyframes glow_green {
    $c1: $success_color;
    $c2: $success_color;
    0% {
      box-shadow: 0 0 $b1 $l1 transparentize($c1, $a1);
    }
    100% {
      box-shadow: 0 0 $b1 $l2 transparentize($c1, $a2);
    }
  }

  @keyframes glow_red {
    $c1: $error_color;
    $c2: $error_color;
    0% {
      box-shadow: 0 0 $b1 $l1 transparentize($c1, $a1);
    }
    100% {
      box-shadow: 0 0 $b1 $l2 transparentize($c1, $a2);
    }
  }

  %glow_horizontal {
    animation: glow_horizontal 2s infinite linear alternate;
  }

  %glow_vertical {
    animation: glow_vertical 2s infinite linear alternate;
  }

  %glow_sunset {
    animation: glow_sunset 2s infinite linear alternate;
  }

  %glow_blue {
    animation: glow_blue 2s infinite linear alternate;
  }

  %glow_pink {
    animation: glow_pink 2s infinite linear alternate;
  }

  %glow_green {
    animation: glow_green 2s infinite linear alternate;
  }

  %glow_red {
    animation: glow_red 2s infinite linear alternate;
  }
}

.monospace {
  font-family: monospace;
}