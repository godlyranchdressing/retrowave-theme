// Drawing mixins

// generic drawing of more complex things

@mixin tab_background(
  $d1,
  $d2,
  $bg: $tab_active_color,
  $c1: $neon_pink,
  $c2: $neon_blue,
  $height: 3px
) {
  background: linear-gradient(#{$d1}, $c1, $c2), #{$bg};
  background-repeat: no-repeat;
  background-position: #{$d2};
  background-size: if(
    $d2 == "bottom" or $d2 == "top",
    100% #{$height},
    #{$height} 100%
  );
}

@function _glow(
  $c1: $neon_blue,
  $c2: $neon_pink,
  $both: false,
  $alpha: 0.75,
  $blur: 4px
) {
  @if ($both) {
    @return 0 2px $blur 0 transparentize($c1, $alpha),
      0 -2px $blur 0 transparentize($c2, $alpha);
  } @else {
    @return 0 0 2px ($blur - 2px) transparentize($c1, $alpha);
  }
}

@mixin highlight_color($c1: $neon_pink, $c2: $neon_blue, $d: "to right") {
  background-image: linear-gradient(#{$d}, $c1, $c2);

  &:backdrop {
    $c1: desaturate($c1, 90%);
    $c2: desaturate($c2, 90%);
    background-image: linear-gradient(#{$d}, $c1, $c2);
  }
}

@mixin _shadows($list...) {
  //
  // Helper mixin to stack up to box-shadows;
  //
  $shadows: null;

  @each $shadow in $list {
    @if $shadow!=none {
      $shadows: $shadows, $shadow;
    }
  }

  box-shadow: $shadows;
}

// entries
@function entry_focus_border($fc: $focus_color) {
  @return $fc;
}

@mixin entry($t, $fc: $focus_color) {
  //
  // Entries drawing function
  //
  // $t: entry type
  // $fc: focus color
  //
  // possible $t values:
  // normal, focus, insensitive, backdrop, backdrop-insensitive, osd, osd-focus, osd-backdrop, block_cursor;
  //

  $sunken_shadow: inset 0 2px 2px 2px $shadow_color;

  @if $t==normal {
    color: $text_color;
    border-color: $borders_color;
    background-color: $base_color;
    @include _shadows($sunken_shadow);
    // for the transition to work the number of shadows in different states needs to match, hence the transparent shadow here.
  }
  @if $t==focus {
    border-color: entry_focus_border($fc);
    @include _shadows(_glow($fc), $sunken_shadow);
    outline: none;
  }
  @if $t==insensitive {
    color: $insensitive_fg_color;
    border-color: $borders_color;
    background-color: $insensitive_bg_color;
    box-shadow: none;
  }
  @if $t==backdrop {
    color: $backdrop_text_color;
    border-color: $backdrop_borders_color;
    background-color: $backdrop_base_color;
    box-shadow: none;
  }
  @if $t==backdrop-insensitive {
    color: $backdrop_insensitive_color;
    border-color: $backdrop_borders_color;
    background-color: $insensitive_bg_color;
    box-shadow: none;
  }
  @if $t==block_cursor {
    color: $base_color;
    background-color: $text_color;
  }
}

// buttons

@function _border_color($c, $darker: false) {
  @if $darker == true {
    @return darken($c, 20%);
  } @else {
    @return darken($c, 10%);
  }
}

@function _text_shadow_color($tc: $fg_color, $bg: $bg_color) {
  //
  // calculate the color of text shadows
  //
  // $tc is the text color
  // $bg is the background color
  //
  $_lbg: lightness($bg) / 100%;
  @if lightness($tc) <50% {
    @return transparentize(white, 1-$_lbg/($_lbg * 1.3));
  } @else {
    @return transparentize(black, $_lbg * 0.8);
  }
}

@function _button_hilight_color($c) {
  //
  // calculate the right top hilight color for buttons
  //
  // $c: base color;
  //
  /*
  @if lightness($c) >95% {
    @return white;
  } @else if lightness($c) >90% {
    @return mix($c, white, 0.2);
  } @else if lightness($c) >80% {
    @return mix($c, white, 0.5);
  } @else if lightness($c) >50% {
    @return mix($c, white, 0.8);
  } @else if lightness($c) >40% {
    @return mix($c, white, 0.9);
  } @else {
    @return mix($c, white, 0.2);
  }
  */

  @if lightness($c) >30% {
    @return lighten($c, 10%);
  } @else if lightness($c) >50% {
    @return lighten($c, 5%);
  } @else {
    @return lighten($c, 15%);
  }
}

@function _button_lowlight_color($c) {
  @if lightness($c) >30% {
    @return $borders_color;
  } @else if lightness($c) >50% {
    @return darken($c, 25%);
  } @else {
    @return darken($c, 20%);
  }
}

@mixin _button_text_shadow($tc: $fg_color, $bg: $bg_color) {
  //
  // helper function for the text emboss effect
  //
  // $tc is the optional text color, not the shadow color
  //
  // TODO: this functions needs a way to deal with special cases
  //

  $_shadow: rgba(0, 0, 0, 0.9);
  text-shadow: -1px 1px 2px _text_shadow_color($tc);
  -gtk-icon-shadow: -1px 1px $_shadow;
}

@mixin button($t, $c: $bg_color, $tc: $fg_color, $glow: false) {
  //
  // Button drawing function
  //
  // $t:    button type,
  // $c:    base button color for colored* types
  // $tc:   optional text color for colored* types
  // $glow: wheter the glow effect should be applied
  //
  // possible $t values:
  // normal, hover, active, insensitive, insensitive-active,
  // backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
  // osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
  //
  // This mixin sets the $button_fill global variable which containts the button background-image
  //
  $_glow: if($glow, _glow($c), none);
  $_hilight_color: _button_hilight_color($c);
  $_retro_highlight: inset 0 2px _button_hilight_color($c),
    inset -2px 0 _button_hilight_color($c),
    inset 0 -1px _button_lowlight_color($c),
    inset 1px 0 _button_lowlight_color($c);
  $_button_shadow: 0 1px 2px transparentize($shadow_color, 0.03);

  @if $t==normal {
    //
    // normal button
    //
    $_hilight_color: _button_hilight_color($c);
    $_retro_highlight: inset 0 2px _button_hilight_color($c),
      inset -2px 0 _button_hilight_color($c),
      inset 0 -1px _button_lowlight_color($c),
      inset 1px 0 _button_lowlight_color($c);
    //
    color: $tc;
    outline-color: transparentize($tc, 0.7);
    border-color: _button_lowlight_color($c)
      _button_lowlight_color($c)
      $borders_color
      $borders_color;
    background-color: $c;
    @include _button_text_shadow($tc, $c);
    @include _shadows($_retro_highlight, $_glow);
  } @else if $t==hover {
    //
    // hovered button
    //
    $_hilight_color: _button_hilight_color($c);
    $_retro_highlight: inset 0 2px _button_hilight_color($c),
      inset -2px 0 _button_hilight_color($c),
      inset
        0 -1px
        if($c==$bg_color, _button_lowlight_color($c), darken($c, 25%)),
      inset 1px 0 if($c==$bg_color, _button_lowlight_color($c), darken($c, 25%));
    //
    color: $tc;
    outline-color: transparentize($tc, 0.7);
    background-color: lighten($c, 5%);
    border-color: $borders_color;
    border-bottom-color: if(
      $c != $bg_color,
      darken($c, 50%),
      _border_color($c)
    );
    @include _button_text_shadow($tc, $c);
    @include _shadows($_retro_highlight, $_glow);
  }

  @if $t==normal-alt {
    //
    // normal button alternative look
    //
    color: $tc;
    outline-color: transparentize($tc, 0.7);
    border-color: if(
      $c != $bg_color,
      _border_color($c, true),
      $alt_borders_color
    );
    background-color: $c;

    @include _button_text_shadow($tc, $c);
    @include _shadows(
      inset 0 1px _button_hilight_color(lighten($c, 6%)),
      $_button_shadow
    );
  } @else if $t==hover-alt {
    //
    // hovered button alternative look
    //
    color: $tc;
    outline-color: transparentize($tc, 0.7);
    border-color: if(
      $c != $bg_color,
      _border_color($c, true),
      $alt_borders_color
    );
    background-color: lighten($c, 4%);
    @include _shadows(inset 0 1px $_hilight_color, $_button_shadow);
  } @else if $t==active {
    //
    // pushed button
    //
    $_hilight_color: _button_hilight_color($c);
    $_retro_highlight: inset 0 -2px _button_hilight_color($c),
      inset 2px 0 _button_hilight_color($c),
      inset 0 2px _button_lowlight_color($c),
      inset -1px 0 _button_lowlight_color($c);
    //
    color: $tc;
    outline-color: transparentize($tc, 0.7);
    border-color: _button_lowlight_color($c)
      _button_lowlight_color($c)
      $borders_color
      $borders_color;
    background-color: darken($c, 5%);
    @include _button_text_shadow($tc, $c);
    @include _shadows($_retro_highlight, inset 0 1px 2px 1px $shadow_color);

    text-shadow: none;
    -gtk-icon-shadow: none;
  } @else if $t==insensitive {
    //
    // insensitive button
    //
    $_bg: if($c != $bg_color, mix($c, $base_color, 85%), $insensitive_bg_color);

    label,
    & {
      color: if($tc != $fg_color, mix($tc, $_bg, 50%), $insensitive_fg_color);
    }

    border-color: if(
      $c != $bg_color,
      _border_color($c),
      $insensitive_borders_color
    );
    background-color: $_bg;
    text-shadow: none;
    -gtk-icon-shadow: none;
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    @include _shadows(inset 0 1px transparentize(white, 1));
  } @else if $t==insensitive-active {
    //
    // insensitive pushed button
    //
    $_bg: darken(mix($c, $base_color, 85%), 6%);
    $_bc: if($c != $bg_color, _border_color($c), $insensitive_borders_color);

    label,
    & {
      color: if($c != $bg_color, mix($tc, $_bg, 60%), $insensitive_fg_color);
    }

    border-color: $_bc;
    background-color: $_bg;
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    @include _shadows(inset 0 1px transparentize(white, 1));
  } @else if $t==backdrop {
    //
    // backdrop button
    //
    $_bg: if($c != $bg_color, $c, $backdrop_bg_color);
    $_bc: _border_color($c);

    label,
    & {
      color: if($tc != $fg_color, mix($tc, $_bg, 80%), $backdrop_fg_color);
    }

    border-color: if($c != $bg_color, $_bc, $backdrop_borders_color);
    background-color: $_bg;
    text-shadow: none;
    -gtk-icon-shadow: none;
    @include _shadows(inset 0 1px transparentize(white, 1));
  } @else if $t==backdrop-active {
    //
    // backdrop pushed button
    //
    $_bg: darken(mix($c, $base_color, 85%), 8%);
    $_bc: _border_color($c);

    label,
    & {
      color: if($tc != $fg_color, mix($tc, $_bg, 80%), $backdrop_fg_color);
    }

    border-color: if($c != $bg_color, $_bc, $backdrop_borders_color);
    background-color: $_bg;
    @include _shadows(inset 0 1px transparentize(white, 1));
  } @else if $t==backdrop-insensitive {
    //
    // backdrop insensitive button
    //

    $_bg: if($c != $bg_color, mix($c, $base_color, 85%), $insensitive_bg_color);
    $_bc: _border_color($c);

    label,
    & {
      color: if(
        $c != $bg_color,
        mix($tc, $_bg, 35%),
        $backdrop_insensitive_color
      );
    }

    border-color: if($c != $bg_color, $_bc, $backdrop_borders_color);
    background-color: $_bg;
    text-shadow: none;
    -gtk-icon-shadow: none;
    // white with 0 alpha to avoid an ugly transition, since no color means
    // black with 0 alpha
    @include _shadows(inset 0 1px transparentize(white, 1));
  } @else if $t==backdrop-insensitive-active {
    //
    // backdrop insensitive pushed button
    //

    $_bg: darken(mix($c, $base_color, 85%), 4%);
    $_bc: _border_color($c);

    label {
      color: if(
        $c != $bg_color,
        mix($tc, $_bg, 35%),
        $backdrop_insensitive_color
      );
    }

    border-color: if($c != $bg_color, $_bc, $backdrop_borders_color);
    background-color: $_bg;
    @include _shadows(inset 0 1px transparentize(white, 1));
  } @else if $t==undecorated {
    //
    // reset
    //
    border-color: transparent;
    background-color: transparent;
    $button_fill: none !global;
    background-image: $button_fill;

    @include _shadows(inset 0 1px transparentize(white, 1));

    text-shadow: none;
    -gtk-icon-shadow: none;
  }
}

@mixin overshoot($p, $t: normal, $c: $neon_blue) {
  //
  // overshoot
  //
  // $p: position
  // $t: type
  // $c: base color
  //
  // possible $p values:
  // top, bottom, right, left
  //
  // possible $t values:
  // normal, backdrop
  //

  $_small_gradient_length: 3%;
  $_big_gradient_length: 50%;

  $_small_gradient_size: 100% $_small_gradient_length;
  $_big_gradient_size: 100% $_big_gradient_length;

  @if $p==right or $p==left {
    $_small_gradient_size: $_small_gradient_length 100%;
    $_big_gradient_size: $_big_gradient_length 100%;
  }

  $_small_gradient_color: $c;
  $_big_gradient_color: transparentize($neon_pink, 0.9);

  $_small_gradient: radial-gradient(
    farthest-side at $p,
    $_small_gradient_color 85%,
    transparentize($_small_gradient_color, 1)
  );

  $_big_gradient: radial-gradient(
    farthest-side at $p,
    $_big_gradient_color,
    transparentize($_big_gradient_color, 1)
  );

  @if $t==normal {
    background-image: $_small_gradient, $_big_gradient;
    background-size: $_small_gradient_size, $_big_gradient_size;
  } @else if $t==backdrop {
    background-image: $_small_gradient;
    background-size: $_small_gradient_size;
  }

  background-repeat: no-repeat;
  background-position: $p;

  background-color: transparent; // reset some properties to be sure to not inherit them somehow
  border: none; //
  box-shadow: none; //
}
