/*************************
 * Check and Radio items *
 *************************/
// draw regular check and radio items using our PNG assets
// all assets are rendered from assets.svg. never add pngs directly

//selection-mode
@each $check_state, $check_icon, $check_color,
  $check_background
    in (
      "",
      "none",
      "transparent",
      "#{transparentize($selected_bg_color, .05)}"
    ),
  (
    ":hover",
    "none",
    "transparent",
    "#{transparentize($selected_bg_color, .05)}"
  ),
  (
    ":active",
    "none",
    "transparent",
    "#{transparentize($selected_bg_color, .05)}"
  ),
  (
    ":backdrop",
    "none",
    "transparent",
    "#{transparentize(desaturate($selected_bg_color, 100%), .05)}"
  ),
  (
    ":checked",
    "-gtk-icontheme('object-select-symbolic')",
    "#{$osd_fg_color}",
    "#{transparentize($selected_bg_color, .05)}"
  ),
  (
    ":checked:hover",
    "-gtk-icontheme('object-select-symbolic')",
    "#{$osd_fg_color}",
    "#{transparentize($selected_bg_color, .05)}"
  ),
  (
    ":checked:active",
    "-gtk-icontheme('object-select-symbolic')",
    "#{$osd_fg_color}",
    "#{transparentize($selected_bg_color, .05)}"
  ),
  (
    ":backdrop:checked",
    "-gtk-icontheme('object-select-symbolic')",
    "#{transparentize($osd_fg_color, 0.2)}",
    "#{transparentize(desaturate($selected_bg_color, 100%), .05)}"
  )
{
  .view.content-view.check#{$check_state}:not(list),
  .content-view .tile check#{$check_state}:not(list) {
    margin: 4px;
    min-width: 32px;
    min-height: 32px;
    color: #{$check_color};
    background-color: #{$check_background};
    border-radius: 5px;
    background-image: none;
    transition: 200ms;
    box-shadow: none;
    border-width: 0;
    -gtk-icon-source: #{$check_icon};
    -gtk-icon-shadow: none;
  }
}

checkbutton.text-button,
radiobutton.text-button {
  // this is for a nice focus on check and radios text
  padding: 2px 0;
  outline-offset: 0;
  // border-spacing: 4px;
}

check,
radio {
  $c1: $neon_yellow;
  $c2: $neon_pink;

  margin: 0 4px;

  &:only-child {
    margin: 0;
  }

  popover & {
    // when in a popover add more space between the label and the check, reset the other side margin.
    // See https://bugzilla.gnome.org/show_bug.cgi?id=779570 for details.
    &.left:dir(rtl) {
      margin-left: 0;
      margin-right: 12px;
    }

    &.right:dir(ltr) {
      margin-left: 12px;
      margin-right: 0;
    }
  }

  min-height: 14px;
  min-width: 14px;
  border: 1px solid;
  -gtk-icon-source: none;

  @include button(normal-alt, $base_color);
  &,
  &:hover,
  &:checked,
  &:active {
    -gtk-icon-shadow: none;
  }

  &:hover {
    @include button(hover-alt, $base_color);
  }
  &:checked,
  &:indeterminate,
  &:checked:hover,
  &:indeterminate:hover {
    @include highlight_color($c1, $c2, "to bottom");
    box-shadow: _glow($c1, $c2, $both: true);
    @if ($glow) {
      @extend %glow_sunset;
    }
  }
  &:checked,
  &:indeterminate {
    &:disabled {
      @include highlight_color(
        $c1: desaturate($c1, 90%),
        $c2: desaturate($c2, 90%),
        $d: "to bottom"
      );
      box-shadow: none;
      @if ($glow) {
        animation: none;
      }
    }
  }
  &:checked:backdrop {
    @include highlight_color(
      desaturate($c1, 90%),
      desaturate($c2, 90%),
      "to bottom"
    );
  }

  &:disabled {
    @include button(insensitive);
    box-shadow: none;
    border-color: $borders_color;
  }
  &:backdrop {
    @include button(backdrop);

    transition: $backdrop_transition;

    &:disabled {
      @include button(backdrop-insensitive);
    }
  }

  .osd & {
    @include button(normal);

    &:hover {
      @include button(normal);
    }
    &:active {
      @include button(active);
    }
    &:backdrop {
      @include button(backdrop);
    }
    &:disabled {
      @include button(insensitive);
    }
  }

  menu menuitem &,
  treeview & {
    margin: 0; // this is a workaround for a menu check/radio size allocation issue
    min-height: 14px;
    min-width: 14px;
    &,
    &:hover,
    &:checked {
      // get rid of glow
      box-shadow: none;
    }
  }
}

%check,
check {
  & {
    // see the icon_sizing mixin
    // -gtk-icon-size: 14px;
  }

  &:checked {
    -gtk-icon-source: -gtk-recolor(url("assets/check.svg"));
  }

  &:indeterminate {
    -gtk-icon-source: -gtk-recolor(url("assets/dash.svg"));
  }
}

%radio,
radio {
  border-radius: 100%;
  // see the icon_sizing mixin
  // -gtk-icon-size: 14px;

  &:checked {
    -gtk-icon-source: -gtk-recolor(url("assets/bullet.svg"));
  }

  &:indeterminate {
    -gtk-icon-source: -gtk-recolor(url("assets/dash.svg"));
  }
}

// ANIMATION:
// this is made with those pretty convoluted transitions, since checks and radios have to animate only on state changes,
// the transformation is set on the active state and it get reset on the checked state.
radio:not(:indeterminate):not(:checked):active:not(:backdrop) {
  -gtk-icon-transform: scale(0);
}

check:not(:indeterminate):not(:checked):active:not(:backdrop) {
  -gtk-icon-transform: translate(6px, -3px) rotate(-45deg) scaleY(0.2)
    rotate(45deg) scaleX(0);
}

radio,
check {
  &:active {
    -gtk-icon-transform: scale(0, 1);
  } // should tackle the indeterminate state, untested

  &:checked:not(:backdrop),
  &:indeterminate:not(:backdrop) {
    -gtk-icon-transform: unset;
    transition: 400ms;
  }
}

menu menuitem {
  radio,
  check {
    &:checked:not(:backdrop),
    &:indeterminate:not(:backdrop) {
      transition: none;
    }
  }
}

treeview.view check,
treeview.view radio {
  &:selected {
    &:focus,
    & {
      color: $checkradio_fg_color;
    }

    &:disabled {
      color: $insensitive_fg_color;

      &:backdrop {
        color: $backdrop_insensitive_color;
      }
    }
  }

  &:backdrop {
    &:selected,
    & {
      color: $backdrop_fg_color;
    }
  }
}

treeview.view radio:selected {
  &:focus,
  & {
    @extend %radio;
  }
} // This is a workaround
