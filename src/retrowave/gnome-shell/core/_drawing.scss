// Drawing mixins

// generic drawing of more complex things
@mixin use_background_image($path, $name, $reset: false, $size: false) {
  @if ($reset) {
    background-color: transparent;
    border-color: transparent;
    box-shadow: none;
    border-radius: 0;
  }

  @if ($size) {
    background-size: $size;
  }

  @if ($name) {
    $name: "/" + $name;
  }

  @if ($path) {
    $path: "/" + $path;
  }

  background-image: url("assets#{$path}#{$name}.svg");
}

@mixin use_border_image($path, $name, $reset: false, $width: 1px, $slice: 6) {
  @if ($reset) {
    background-color: transparent;
    border-color: transparent;
    box-shadow: none;
    border-radius: 0;
  }

  @if ($name) {
    $name: "/" + $name;
  }

  @if ($path) {
    $path: "/" + $path;
  }

  border: #{$width} solid transparent;
  border-image: url("assets#{$path}#{$name}.svg") $slice;
}

@function _glow($c1: $neon_blue, $c2: $neon_pink, $both: false, $alpha: 0.75) {
  @if ($both) {
    @return 0 2px 3px 0 transparentize($c1, $alpha),
      0 -2px 3px 0 transparentize($c2, $alpha);
  } @else {
    @return 0 0 2px 3px transparentize($c1, $alpha);
  }
}

// provide font size in rem, with px fallback
@mixin fontsize($size: 24, $base: 16) {
  font-size: round($size) + pt;
  //font-size: ($size / $base) * 1rem;
}

// entries

@mixin entry($t, $fc: $focus_color, $edge: $borders_edge) {
  //
  // Entries drawing function
  //
  // $t: entry type
  // $fc: focus color
  // $edge: set to none to not draw the bottom edge or specify a color to not use the default one
  //
  // possible $t values:
  // normal, focus, insensitive
  //

  @if $t==normal {
    background-color: $base_color;
    border-color: $borders_color;
  }
  @if $t==focus {
    border-color: $fc;
    box-shadow: 0 0 2px 2px transparentize($fc, 0.75);
  }
  @if $t==hover {
  }
  @if $t==insensitive {
    color: $insensitive_fg_color;
    border-color: $insensitive_bg_color;
    box-shadow: none;
  }
}

// buttons
@function draw_text_shadow_color($tc: $fg_color, $bg: $bg_color) {
  //
  // calculate the color of text shadows
  //
  // $tc is the text color
  // $bg is the background color
  //
  $lbg: lightness($bg) / 100%;
  @if lightness($tc) <50% {
    @return rgba(255, 255, 255, $lbg/($lbg * 1.3));
  } @else {
    @return rgba(0, 0, 0, 1-$lbg * 0.8);
  }
}

@mixin draw_button_text_shadow($tc: $fg_color, $bg: $bg_color) {
  //
  // helper function for the text emboss effect
  //
  // $tc is the optional text color, not the shadow color
  //
  // TODO: this functions needs a way to deal with special cases
  //

  $shadow: draw_text_shadow_color($tc, $bg);
  text-shadow: -1px 1px 2px $shadow;
  icon-shadow: -1px 1px 2px $shadow;
}

@mixin button($t, $c: $bg_color, $tc: $fg_color) {
  //
  // Button drawing function
  //
  // $t:    button type,
  // $c:    base button color for colored* types
  // $tc:   optional text color for colored* types
  //
  // possible $t values:
  // normal, hover, active, insensitive, insensitive-active,
  // backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
  // osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
  //

  $hilight_color: draw_button_hilight_color($c);
  $text_shadow: draw_button_text_shadow($tc, $c);

  // normal button
  @if $t==normal {
    color: $tc;
    text-shadow: $text_shadow;
    icon-shadow: $text_shadow;
    @include use_border_image("button", "normal", $reset: true);
  }

  // focused button
  @if $t==focus {
    color: $tc;
    text-shadow: $text_shadow;
    icon-shadow: $text_shadow;
    @include use_border_image("button", "hover", $reset: true);
  }

  // hover button
  @else if $t==hover {
    color: $tc;
    text-shadow: $text_shadow;
    icon-shadow: $text_shadow;
    @include use_border_image("button", "hover", $reset: true);
  }

  // active button
  @else if $t==active {
    color: $tc;
    text-shadow: none;
    icon-shadow: none;
    @include use_border_image("button", "active", $reset: true);
  }

  // insensitive button
  @else if $t==insensitive {
    color: $insensitive_fg_color;
    border-color: $insensitive_borders_color;
    background-color: $insensitive_bg_color;
    border-image: none;
    box-shadow: none;
    text-shadow: none;
    icon-shadow: none;
  }

  // reset
  @else if $t==undecorated {
    border-color: transparent;
    background-color: transparent;
    background-image: none;
    text-shadow: none;
    icon-shadow: none;
  }
}

// overview icons
@mixin overview-icon($c1: $osd_fg_color, $c2: mix(black, $focus_color)) {
  .overview-icon {
    @extend %icon_tile;
    color: $c1;
  }

  &:hover,
  &:selected {
    .overview-icon {
      background-color: transparentize($c2, 0.3);
    }
  }

  &:focus {
    .overview-icon {
      background-color: transparentize($c2, 0.5);
    }
  }

  &:drop {
    .overview-icon {
      background-color: $selected_bg_color;
    }
  }

  &:active,
  &:checked {
    .overview-icon {
      background-color: transparentize(darken($osd_bg_color, 10%), 0.5);
    }
  }
}
